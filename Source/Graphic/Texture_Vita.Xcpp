#ifdef PLATFORM_VITA

#include "Graphic/Texture.hpp"
#include "Utils/Folders.hpp"
#include "Utils/ImageIO.hpp"

extern "C" {
    #include "Thirdparty/VitaGL/config.h"
    #include "Thirdparty/VitaGL/gpu_utils.h"
    #include "Thirdparty/VitaGL/shared.h"
    extern texture *texture_slots;
}

using namespace std;

extern bool trilinear;


#define GXM_TEX_MAX_SIZE 4096
#define MAX(x, y) (((x) > (y)) ? (x) : (y))
static SceKernelMemBlockType MemBlockType = SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM_RW;

static bool isFormatSwizzled(SceGxmTextureFormat fmt){
    switch(fmt){
        default:
            return false;
        case SCE_GXM_TEXTURE_FORMAT_UBC1_1BGR:
        case SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR:
        case SCE_GXM_TEXTURE_FORMAT_UBC4_R:
        case SCE_GXM_TEXTURE_FORMAT_UBC5_GR:
        case SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR:
        case SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_1BGR:
        case SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR:
        case SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_1BGR:
            return true;
    }
}

/*
    Skip VitaGL for more efficient texture upload and easier memory management
*/
void TextureRes::uploadGXM(ImageRec &texture){
    assert(texture.is_pvr);

    data = texture.data;

    glDeleteTextures(1, &id);
    glGenTextures(1, &id);

    texture *tex = texture_slots + ((uint32_t) id);

    if(texture.pvr_header.isCompressed()){
        sceGxmTextureInitSwizzled(
            &tex->gxm_tex,
            ptr,
            fmt,
            level_width,
            level_height,
            total_lod - level
        );
    }else{
        sceGxmTextureInitLinear(
            &tex->gxm_tex,
            ptr,
            fmt,
            level_width,
            level_height,
            total_lod - level
        );
    }
}

#endif